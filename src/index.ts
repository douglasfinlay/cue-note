import { app, BrowserWindow, ipcMain } from 'electron';
import { EosConsole } from './main/eos-console';

let mainWindow: BrowserWindow | null;
let eos: EosConsole | null;

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
    app.quit();
}

const createWindow = (): void => {
    mainWindow = new BrowserWindow({
        height: 600,
        width: 800,
        webPreferences: {
            preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
        },
    });

    mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

    mainWindow.webContents.openDevTools();
};

app.on('ready', createWindow);

app.on('window-all-closed', () => {
    // Quit when all windows are closed, except on macOS. There, it's common
    // for applications and their menu bar to stay active until the user quits
    // explicitly with Cmd + Q.
    if (process.platform !== 'darwin') {
        app.quit();
    }
});

app.on('activate', () => {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) {
        createWindow();
    }
});

app.on('quit', () => {
    if (eos) {
        eos.disconnect();
        eos.removeAllListeners();
    }
});

ipcMain.on('console:connect', (_event, ...[address]) => {
    if (eos) {
        eos.disconnect();
    }

    eos = new EosConsole(address);

    eos.on('connecting', () => {
        mainWindow?.webContents.send('console:connection-state', 'connecting');
    });

    eos.on('connected', () => {
        mainWindow?.webContents.send('console:connection-state', 'connected');
    });

    eos.on('disconnected', () => {
        mainWindow?.webContents.send(
            'console:connection-state',
            'disconnected',
        );
    });

    eos.on('initial-sync-complete', () => {
        mainWindow?.webContents.send('console:initial-sync-complete');
    });

    eos.on('active-cue', (cueNumber: string) => {
        mainWindow?.webContents.send('console:active-cue', cueNumber);
    });

    eos.on('pending-cue', (cueNumber: string) => {
        mainWindow?.webContents.send('console:pending-cue', cueNumber);
    });

    eos.connect();
});

ipcMain.on('console:disconnect', () => {
    if (eos) {
        eos.disconnect();
        eos = null;
    }
});

ipcMain.handle('console:get-cues', () => eos?.getCues() ?? []);

ipcMain.handle('console:get-current-cue', () => eos?.activeCue);

ipcMain.handle('console:get-pending-cue', () => eos?.pendingCue);

ipcMain.on('console:go-to-cue', (_event, ...[cueNumber]) =>
    console.log('GO TO CUE', cueNumber),
);

ipcMain.on('console:update-cue-notes', (_event, [cueNumber, notes]) => {
    console.log('UPDATE CUE NOTES', cueNumber, notes);
});
